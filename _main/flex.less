/*
* Flex v1.2
* Copyright 2014, Caleb Hardin.  All rights reserved.
**** Licensed under the GPL v2.0 license.
**** http://www.gnu.org/licenses/gpl-2.0.txt
*/


/* ---------- TO DO ----------
==================================================
-add offsets for responsive grids

*/

/* Table of Contents
==================================================
    1. Base Grid
    2. Base Grid (with no gutters)
    3. Small Responsive Grid
    4. Medium Responsive Grid
    5. Large Responsive Grid
    6. Extra Large Responsive Grid


/* Variables
================================================== */
@gutter: 2%;
@numOfColumns: 12;

// Breakpoints
@small: 400px;
@medium: 600px;
@large: 900px;
@xlarge: 1200px;

/* #Base Grid
================================================== */

.width(@columnNum){
    @numColumns: (@numOfColumns / @columnNum) - 1;        // Number of actual columns to span width
    @dividend: 100 - (@gutter * @numColumns);       // 100 - number of gaps multiplied by gutter

    width: (@dividend / (@numColumns + 1));
}

.marginLeft(@columnNum){
    @dividend: 100 - (@gutter * ((@numOfColumns / @columnNum) - 1));  // 100 - number of gaps multiplied by gutter
    @numColumns: @numOfColumns / @columnNum;              // Number of actual columns to span width

    margin-left: (@dividend / @numColumns) + (@gutter * 1.5);
}


    .grid {position: relative; width: 100%; margin: 0 auto; padding: 0;
        
        .column,
        .columns,
        .parent  { float: left; display: block; margin-left: @gutter / 2; margin-right: @gutter / 2; box-sizing: border-box; -moz-box-sizing: border-box;}
        .row     { margin-bottom: 20px; }

        /* Nested Column Classes */
        .column.alpha, .columns.alpha               { margin-left: 0; }
        .column.omega, .columns.omega               { margin-right: 0; }

        /* Base Grid */
        .one.column,
        .one.columns                     { .width(1); }
        .two.column,
        .two.columns                     { .width(2); }
        .three.column,
        .three.columns                   { .width(3); }
        .four.column,
        .four.columns                    { .width(4); }
        .five.column,
        .five.columns                    { .width(5); }
        .six.column,
        .six.columns                     { .width(6); }
        .seven.column,
        .seven.columns                   { .width(7); }
        .eight.column,
        .eight.columns                   { .width(8); }
        .nine.column,
        .nine.columns                    { .width(9); }
        .ten.column,
        .ten.columns                     { .width(10); }
        .eleven.column,
        .eleven.columns                  { .width(11); }
        .twelve.column,
        .twelve.columns,
        .full.column,
        .full.columns                    { .width(12); }

        .one-third.column,
        .one-third.columns               { .width(4); }
        .two-thirds.column,
        .two-thirds.columns              { .width(8); }
        .one-fifth.column,
        .one-fifth.columns               { .width(2.4); }

        /* Offsets */
        .offset-by-one                   { .marginLeft(1); }
        .offset-by-two                   { .marginLeft(2); }
        .offset-by-three                 { .marginLeft(3); }
        .offset-by-four                  { .marginLeft(4); }
        .offset-by-five                  { .marginLeft(5); }
        .offset-by-six                   { .marginLeft(6); }
        .offset-by-seven                 { .marginLeft(7); }
        .offset-by-eight                 { .marginLeft(8); }
        .offset-by-nine                  { .marginLeft(9); }
        .offset-by-ten                   { .marginLeft(10); }
        .offset-by-eleven                { .marginLeft(11); }
        
        .offset-by-one-fifth             { .marginLeft(2.4); }
        
        
        
        /* Parent-Based Sizing */
        .grid.one .parent,
        .row.one .parent         { .responsiveWidth(1); }
        .grid.two .parent,
        .row.two .parent         { .responsiveWidth(2); }
        .grid.three .parent,
        .row.three .parent       { .responsiveWidth(3); }
        .grid.four .parent,
        .row.four .parent        { .responsiveWidth(4); }
        .grid.five .parent,
        .row.five .parent        { .responsiveWidth(5); }
        .grid.six .parent,
        .row.six .parent         { .responsiveWidth(6); }
        .grid.seven .parent,
        .row.seven .parent       { .responsiveWidth(7); }
        .grid.eight .parent,
        .row.eight .parent       { .responsiveWidth(8); }
        .grid.nine .parent,
        .row.nine .parent        { .responsiveWidth(9); }
        .grid.ten .parent,
        .row.ten .parent         { .responsiveWidth(10); }
        .grid.eleven .parent,
        .row.eleven .parent      { .responsiveWidth(11); }
        .grid.twelve .parent,
        .row.twelve .parent,
        .grid.full .parent,
        .row.full .parent        { .responsiveWidth(12); }

    }



/* #Base Grid With No Gutters
================================================== */

.widthNoGutter(@columnNum){
    width: (@columnNum / @numOfColumns) * 100%;
}

.marginLeftNoGutter(@columnNum){
    margin-left: (@columnNum / @numOfColumns) * 100%;
}



    .grid.no-gutter {
        
        .column,
        .columns {margin-left: 0; margin-right: 0; }
        .row     { margin-bottom: 0; }

        /* Base Grid */
        .one.column,
        .one.columns                     { .widthNoGutter(1); }
        .two.column,
        .two.columns                     { .widthNoGutter(2); }
        .three.column,
        .three.columns                   { .widthNoGutter(3); }
        .four.column,
        .four.columns                    { .widthNoGutter(4); }
        .five.column,
        .five.columns                    { .widthNoGutter(5); }
        .six.column,
        .six.columns                     { .widthNoGutter(6); }
        .seven.column,
        .seven.columns                   { .widthNoGutter(7); }
        .eight.column,
        .eight.columns                   { .widthNoGutter(8); }
        .nine.column,
        .nine.columns                    { .widthNoGutter(9); }
        .ten.column,
        .ten.columns                     { .widthNoGutter(10); }
        .eleven.column,
        .eleven.columns                  { .widthNoGutter(11); }
        .twelve.column,
        .twelve.columns,
        .full.column,
        .full.columns                    { .widthNoGutter(12); }

        .one-third.column,
        .one-third.columns               { .widthNoGutter(4); }
        .two-thirds.column,
        .two-thirds.columns              { .widthNoGutter(8); }
        .one-fifth.column,
        .one-fifth.columns               { .widthNoGutter(2.4); }

        /* Offsets */
        .offset-by-one                   { .marginLeftNoGutter(1); }
        .offset-by-two                   { .marginLeftNoGutter(2); }
        .offset-by-three                 { .marginLeftNoGutter(3); }
        .offset-by-four                  { .marginLeftNoGutter(4); }
        .offset-by-five                  { .marginLeftNoGutter(5); }
        .offset-by-six                   { .marginLeftNoGutter(6); }
        .offset-by-seven                 { .marginLeftNoGutter(7); }
        .offset-by-eight                 { .marginLeftNoGutter(8); }
        .offset-by-nine                  { .marginLeftNoGutter(9); }
        .offset-by-ten                   { .marginLeftNoGutter(10); }
        .offset-by-eleven                { .marginLeftNoGutter(11); }
        
        .offset-by-one-fifth             { .marginLeftNoGutter(2.4); }

    }




/* Small Responsive Grid
================================================== */


.responsiveWidth(@columnNum){
    @numColumns: @numOfColumns / @columnNum;     // Number of actual columns to span width
    @dividend: 100 - (@gutter * @numColumns);     // 100 - number of gaps multiplied by gutter

    width: (@dividend / @numColumns);
}

.responsiveMarginLeft(@columnNum){
    @numColumns: @numOfColumns / @columnNum;  // Number of actual columns to span width
    @columnGutter: @gutter * @numColumns;     // gutter % from standard margins of cols.
    @dividend: 100 - @columnGutter;           // available width after margins
    

    margin-left: (@dividend / @numColumns) + (@gutter * 1.5);
}










.responsiveGrids(@prefix){
            /* Responsive Grids */
            .@{prefix}-one.column,
            .@{prefix}-one.columns             { .responsiveWidth(1); }
            .@{prefix}-two.column,
            .@{prefix}-two.columns             { .responsiveWidth(2); }
            .@{prefix}-three.column,
            .@{prefix}-three.columns           { .responsiveWidth(3); }
            .@{prefix}-four.column,
            .@{prefix}-four.columns            { .responsiveWidth(4); }
            .@{prefix}-five.column,
            .@{prefix}-five.columns            { .responsiveWidth(5); }
            .@{prefix}-six.column,
            .@{prefix}-six.columns             { .responsiveWidth(6); }
            .@{prefix}-seven.column,
            .@{prefix}-seven.columns           { .responsiveWidth(7); }
            .@{prefix}-eight.column,
            .@{prefix}-eight.columns           { .responsiveWidth(8); }
            .@{prefix}-nine.column,
            .@{prefix}-nine.columns            { .responsiveWidth(9); }
            .@{prefix}-ten.column,
            .@{prefix}-ten.columns             { .responsiveWidth(10); }
            .@{prefix}-eleven.column,
            .@{prefix}-eleven.columns          { .responsiveWidth(11); }
            .@{prefix}-twelve.column,
            .@{prefix}-twelve.columns,
            .@{prefix}-full.column,
            .@{prefix}-full.columns            { .responsiveWidth(12); }
            
            .@{prefix}-one-third.column,
            .@{prefix}-one-third.columns       { .responsiveWidth(4); }
            .@{prefix}-two-thirds.column,
            .@{prefix}-two-thirds.columns      { .responsiveWidth(8); }
            .@{prefix}-one-fifth.column,
            .@{prefix}-one-fifth.columns       { .responsiveWidth(2.4); }
            

            /* Responsive Offsets */
            .@{prefix}-offset-by-one           { .responsiveMarginLeft(1); }
            .@{prefix}-offset-by-two           { .responsiveMarginLeft(2); }
            .@{prefix}-offset-by-three         { .responsiveMarginLeft(3); }
            .@{prefix}-offset-by-four          { .responsiveMarginLeft(4); }
            .@{prefix}-offset-by-five          { .responsiveMarginLeft(5); }
            .@{prefix}-offset-by-six           { .responsiveMarginLeft(6); }
            .@{prefix}-offset-by-seven         { .responsiveMarginLeft(7); }
            .@{prefix}-offset-by-eight         { .responsiveMarginLeft(8); }
            .@{prefix}-offset-by-nine          { .responsiveMarginLeft(9); }
            .@{prefix}-offset-by-ten           { .responsiveMarginLeft(10); }
            .@{prefix}-offset-by-eleven        { .responsiveMarginLeft(11); }
            
            .@{prefix}-offset-by-one-fifth     { .responsiveMarginLeft(2.4); }
            
            
            /* Parent-Based Sizing */
            &.@{prefix}-one .parent,
            .row.@{prefix}-one .parent         { .responsiveWidth(1); }
            &.@{prefix}-two .parent,
            .row.@{prefix}-two .parent         { .responsiveWidth(2); }
            &.@{prefix}-three .parent,
            .row.@{prefix}-three .parent       { .responsiveWidth(3); }
            &.@{prefix}-four .parent,
            .row.@{prefix}-four .parent        { .responsiveWidth(4); }
            &.@{prefix}-five .parent,
            .row.@{prefix}-five .parent        { .responsiveWidth(5); }
            &.@{prefix}-six .parent,
            .row.@{prefix}-six .parent         { .responsiveWidth(6); }
            &.@{prefix}-seven .parent,
            .row.@{prefix}-seven .parent       { .responsiveWidth(7); }
            &.@{prefix}-eight .parent,
            .row.@{prefix}-eight .parent       { .responsiveWidth(8); }
            &.@{prefix}-nine .parent,
            .row.@{prefix}-nine .parent        { .responsiveWidth(9); }
            &.@{prefix}-ten .parent,
            .row.@{prefix}-ten .parent         { .responsiveWidth(10); }
            &.@{prefix}-eleven .parent,
            .row.@{prefix}-eleven .parent      { .responsiveWidth(11); }
            &.@{prefix}-twelve .parent,
            .row.@{prefix}-twelve .parent,
            &.@{prefix}-full .parent,
            .row.@{prefix}-full .parent        { .responsiveWidth(12); }
            
            &.@{prefix}-one-third .parent,
            .row.@{prefix}-one-third .parent   { .responsiveWidth(4); }
            &.@{prefix}-two-thirds .parent,
            .row.@{prefix}-two-thirds .parent  { .responsiveWidth(8); }
            &.@{prefix}-one-fifth .parent,
            .row.@{prefix}-one-fifth .parent   { .responsiveWidth(2.4); }

}











    @media only screen and (min-width: 0px) {
        .grid {
            .responsiveGrids(sm);
        }
    }





/*  Medium Responsive Grid
================================================== */

    @media only screen and (min-width: @small) {
        .grid {
            .responsiveGrids(md);
        }
    }


/* Large Responsive Grid
================================================== */

    @media only screen and (min-width: @medium) {
        .grid {
            .responsiveGrids(lg);
        }
    }


/* Extra Large Responsive Grid
================================================== */

    @media only screen and (min-width: @large) {
        .grid {
            .responsiveGrids(xlg);
        }
    }


/* #Clearing
================================================== */

    /* Self Clearing Goodness */
    .grid:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; }

    /* Use clearfix class on parent to clear nested columns,
    or wrap each row of columns in a <div class="row"> */
    .clearfix:before,
    .clearfix:after,
    .row:before,
    .row:after {
      content: '\0020';
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0; }
    .row:after,
    .clearfix:after {
      clear: both; }
    .row,
    .clearfix {
      zoom: 1; }

    /* You can also use a <br class="clear" /> to clear columns */
    .clear {
      clear: both;
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0;
    }
