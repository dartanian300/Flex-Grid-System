/*
* Flex v1.2
* Copyright 2014, Caleb Hardin.  All rights reserved.
**** Licensed under the GPL v2.0 license.
**** http://www.gnu.org/licenses/gpl-2.0.txt
*/


/* ---------- TO DO ----------
==================================================
-add offsets for responsive grids

*/

/* Table of Contents
==================================================
    1. Base Grid
    2. Base Grid (with no gutters)
    3. Small Responsive Grid
    4. Medium Responsive Grid
    5. Large Responsive Grid
    6. Extra Large Responsive Grid


/* Variables
================================================== */
$gutter: 2%;
$numOfColumns: 12;

// Breakpoints
/*$small: 400px;
$medium: 600px;
$large: 900px;
$xlarge: 1200px;*/

$breakpoints: (sm: 0px, md: 400px, lg: 600px, xlg: 900px);

$columnNumbers: (one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty-one, twenty-two, twenty-three, twenty-four, twenty-five);
$fractionalColumns: (one-third: 1/3, two-thirds: 2/3, one-fifth: 1/5);

/* #Base Grid
================================================== */

@mixin width($columnNum){
    $numColumns: ($numOfColumns / $columnNum) - 1;        // Number of actual columns to span width
    $dividend: 100 - ($gutter * $numColumns);       // 100 - number of gaps multiplied by gutter

    width: ($dividend / ($numColumns + 1));
}

@mixin marginLeft($columnNum){
    $dividend: 100 - ($gutter * (($numOfColumns / $columnNum) - 1));  // 100 - number of gaps multiplied by gutter
    $numColumns: $numOfColumns / $columnNum;              // Number of actual columns to span width

    margin-left: ($dividend / $numColumns) + ($gutter * 1.5);
}



@mixin widthNoGutter($columnNum){
    width: ($columnNum / $numOfColumns) * 100%;
}

@mixin marginLeftNoGutter($columnNum){
    margin-left: ($columnNum / $numOfColumns) * 100%;
}


@mixin responsiveWidth($columnNum){
    $numColumns: $numOfColumns / $columnNum;     // Number of actual columns to span width
    $dividend: 100 - ($gutter * $numColumns);     // 100 - number of gaps multiplied by gutter

    width: ($dividend / $numColumns);
}

@mixin responsiveMarginLeft($columnNum){
    $numColumns: $numOfColumns / $columnNum;  // Number of actual columns to span width
    $columnGutter: $gutter * $numColumns;     // gutter % from standard margins of cols.
    $dividend: 100 - $columnGutter;           // available width after margins
    

    margin-left: ($dividend / $numColumns) + ($gutter * 1.5);
}


    .grid {position: relative; width: 100%; margin: 0 auto; padding: 0;
        
        .column,
        .columns,
        .parent  { float: left; display: block; margin-left: $gutter / 2; margin-right: $gutter / 2; box-sizing: border-box; -moz-box-sizing: border-box;}
        .row     { margin-bottom: 20px; }

        /* Nested Column Classes */
        .column.alpha, .columns.alpha               { margin-left: 0; }
        .column.omega, .columns.omega               { margin-right: 0; }

        /* Base Grid */
        .one.column,
        .one.columns                     { @include width(1); }
        .two.column,
        .two.columns                     { @include width(2); }
        .three.column,
        .three.columns                   { @include width(3); }
        .four.column,
        .four.columns                    { @include width(4); }
        .five.column,
        .five.columns                    { @include width(5); }
        .six.column,
        .six.columns                     { @include width(6); }
        .seven.column,
        .seven.columns                   { @include width(7); }
        .eight.column,
        .eight.columns                   { @include width(8); }
        .nine.column,
        .nine.columns                    { @include width(9); }
        .ten.column,
        .ten.columns                     { @include width(10); }
        .eleven.column,
        .eleven.columns                  { @include width(11); }
        .twelve.column,
        .twelve.columns,
        .full.column,
        .full.columns                    { @include width(12); }

        .one-third.column,
        .one-third.columns               { @include width(4); }
        .two-thirds.column,
        .two-thirds.columns              { @include width(8); }
        .one-fifth.column,
        .one-fifth.columns               { @include width(2.4); }

        /* Offsets */
        .offset-by-one                   { @include marginLeft(1); }
        .offset-by-two                   { @include marginLeft(2); }
        .offset-by-three                 { @include marginLeft(3); }
        .offset-by-four                  { @include marginLeft(4); }
        .offset-by-five                  { @include marginLeft(5); }
        .offset-by-six                   { @include marginLeft(6); }
        .offset-by-seven                 { @include marginLeft(7); }
        .offset-by-eight                 { @include marginLeft(8); }
        .offset-by-nine                  { @include marginLeft(9); }
        .offset-by-ten                   { @include marginLeft(10); }
        .offset-by-eleven                { @include marginLeft(11); }
        
        .offset-by-one-fifth             { @include marginLeft(2.4); }
        
        
        
        /* Parent-Based Sizing */
        .grid.one .parent,
        .row.one .parent         { @include responsiveWidth(1); }
        .grid.two .parent,
        .row.two .parent         { @include responsiveWidth(2); }
        .grid.three .parent,
        .row.three .parent       { @include responsiveWidth(3); }
        .grid.four .parent,
        .row.four .parent        { @include responsiveWidth(4); }
        .grid.five .parent,
        .row.five .parent        { @include responsiveWidth(5); }
        .grid.six .parent,
        .row.six .parent         { @include responsiveWidth(6); }
        .grid.seven .parent,
        .row.seven .parent       { @include responsiveWidth(7); }
        .grid.eight .parent,
        .row.eight .parent       { @include responsiveWidth(8); }
        .grid.nine .parent,
        .row.nine .parent        { @include responsiveWidth(9); }
        .grid.ten .parent,
        .row.ten .parent         { @include responsiveWidth(10); }
        .grid.eleven .parent,
        .row.eleven .parent      { @include responsiveWidth(11); }
        .grid.twelve .parent,
        .row.twelve .parent,
        .grid.full .parent,
        .row.full .parent        { @include responsiveWidth(12); }

    }



/* #Base Grid With No Gutters
================================================== */





    .grid.no-gutter {
        
        .column,
        .columns {margin-left: 0; margin-right: 0; }
        .row     { margin-bottom: 0; }

        /* Base Grid */
        .one.column,
        .one.columns                     { @include widthNoGutter(1); }
        .two.column,
        .two.columns                     { @include widthNoGutter(2); }
        .three.column,
        .three.columns                   { @include widthNoGutter(3); }
        .four.column,
        .four.columns                    { @include widthNoGutter(4); }
        .five.column,
        .five.columns                    { @include widthNoGutter(5); }
        .six.column,
        .six.columns                     { @include widthNoGutter(6); }
        .seven.column,
        .seven.columns                   { @include widthNoGutter(7); }
        .eight.column,
        .eight.columns                   { @include widthNoGutter(8); }
        .nine.column,
        .nine.columns                    { @include widthNoGutter(9); }
        .ten.column,
        .ten.columns                     { @include widthNoGutter(10); }
        .eleven.column,
        .eleven.columns                  { @include widthNoGutter(11); }
        .twelve.column,
        .twelve.columns,
        .full.column,
        .full.columns                    { @include widthNoGutter(12); }

        .one-third.column,
        .one-third.columns               { @include widthNoGutter(4); }
        .two-thirds.column,
        .two-thirds.columns              { @include widthNoGutter(8); }
        .one-fifth.column,
        .one-fifth.columns               { @include widthNoGutter(2.4); }

        /* Offsets */
        .offset-by-one                   { @include marginLeftNoGutter(1); }
        .offset-by-two                   { @include marginLeftNoGutter(2); }
        .offset-by-three                 { @include marginLeftNoGutter(3); }
        .offset-by-four                  { @include marginLeftNoGutter(4); }
        .offset-by-five                  { @include marginLeftNoGutter(5); }
        .offset-by-six                   { @include marginLeftNoGutter(6); }
        .offset-by-seven                 { @include marginLeftNoGutter(7); }
        .offset-by-eight                 { @include marginLeftNoGutter(8); }
        .offset-by-nine                  { @include marginLeftNoGutter(9); }
        .offset-by-ten                   { @include marginLeftNoGutter(10); }
        .offset-by-eleven                { @include marginLeftNoGutter(11); }
        
        .offset-by-one-fifth             { @include marginLeftNoGutter(2.4); }

    }




/* Small Responsive Grid
================================================== */













@mixin responsiveGrids($prefix){
            /* Responsive Grids */
            /*.#{$prefix}-one.column,
            .#{$prefix}-one.columns             { @include responsiveWidth(1); }
            .#{$prefix}-two.column,
            .#{$prefix}-two.columns             { @include responsiveWidth(2); }
            .#{$prefix}-three.column,
            .#{$prefix}-three.columns           { @include responsiveWidth(3); }
            .#{$prefix}-four.column,
            .#{$prefix}-four.columns            { @include responsiveWidth(4); }
            .#{$prefix}-five.column,
            .#{$prefix}-five.columns            { @include responsiveWidth(5); }
            .#{$prefix}-six.column,
            .#{$prefix}-six.columns             { @include responsiveWidth(6); }
            .#{$prefix}-seven.column,
            .#{$prefix}-seven.columns           { @include responsiveWidth(7); }
            .#{$prefix}-eight.column,
            .#{$prefix}-eight.columns           { @include responsiveWidth(8); }
            .#{$prefix}-nine.column,
            .#{$prefix}-nine.columns            { @include responsiveWidth(9); }
            .#{$prefix}-ten.column,
            .#{$prefix}-ten.columns             { @include responsiveWidth(10); }
            .#{$prefix}-eleven.column,
            .#{$prefix}-eleven.columns          { @include responsiveWidth(11); }
            .#{$prefix}-twelve.column,
            .#{$prefix}-twelve.columns,
            .#{$prefix}-full.column,
            .#{$prefix}-full.columns            { @include responsiveWidth(12); }*/
            
            // Generate Int Responsive Grids
            @for $i from 1 through $numOfColumns{
                    $colNum: nth($columnNumbers, $i);
                    .#{$prefix}-#{$colNum}.column,
                    .#{$prefix}-#{$colNum}.columns     { @include responsiveWidth($i); }

                    @if $i == $numOfColumns{
                        .#{$prefix}-full.column,
                        .#{$prefix}-full.columns     { @include responsiveWidth($i); }
                    }

                    // Generate Int Responsive Offsets
                    @if $i != $numOfColumns{
                        .#{$prefix}-offset-by-#{$colNum}           { @include responsiveMarginLeft($i); }
                    }
            }

            // Generate Int Responsive Offsets
           
            
            // Generate Fractional Responsive Grids
            @each $class, $width in $fractionalColumns {
                .#{$prefix}-#{$class}.column,
                .#{$prefix}-#{$class}.columns       { @include responsiveWidth($numOfColumns * $width); }

                // Generate Fractional Responsive Offsets
                .#{$prefix}-offset-by-#{$class}     { @include responsiveMarginLeft($numOfColumns * $width); }
                //width: $numOfColumns * $width;
            }
            
            /* .#{$prefix}-one-third.column,
            .#{$prefix}-one-third.columns       { @include responsiveWidth(4); }
            .#{$prefix}-two-thirds.column,
            .#{$prefix}-two-thirds.columns      { @include responsiveWidth(8); }
            .#{$prefix}-one-fifth.column,
            .#{$prefix}-one-fifth.columns       { @include responsiveWidth(2.4); } */
            

            /* Responsive Offsets */
            /*.#{$prefix}-offset-by-one           { @include responsiveMarginLeft(1); }
            .#{$prefix}-offset-by-two           { @include responsiveMarginLeft(2); }
            .#{$prefix}-offset-by-three         { @include responsiveMarginLeft(3); }
            .#{$prefix}-offset-by-four          { @include responsiveMarginLeft(4); }
            .#{$prefix}-offset-by-five          { @include responsiveMarginLeft(5); }
            .#{$prefix}-offset-by-six           { @include responsiveMarginLeft(6); }
            .#{$prefix}-offset-by-seven         { @include responsiveMarginLeft(7); }
            .#{$prefix}-offset-by-eight         { @include responsiveMarginLeft(8); }
            .#{$prefix}-offset-by-nine          { @include responsiveMarginLeft(9); }
            .#{$prefix}-offset-by-ten           { @include responsiveMarginLeft(10); }
            .#{$prefix}-offset-by-eleven        { @include responsiveMarginLeft(11); }*/
            
            /*.#{$prefix}-offset-by-one-fifth     { @include responsiveMarginLeft(2.4); }*/
            
            
            /* Parent-Based Sizing */
            &.#{$prefix}-one .parent,
            .row.#{$prefix}-one .parent         { @include responsiveWidth(1); }
            &.#{$prefix}-two .parent,
            .row.#{$prefix}-two .parent         { @include responsiveWidth(2); }
            &.#{$prefix}-three .parent,
            .row.#{$prefix}-three .parent       { @include responsiveWidth(3); }
            &.#{$prefix}-four .parent,
            .row.#{$prefix}-four .parent        { @include responsiveWidth(4); }
            &.#{$prefix}-five .parent,
            .row.#{$prefix}-five .parent        { @include responsiveWidth(5); }
            &.#{$prefix}-six .parent,
            .row.#{$prefix}-six .parent         { @include responsiveWidth(6); }
            &.#{$prefix}-seven .parent,
            .row.#{$prefix}-seven .parent       { @include responsiveWidth(7); }
            &.#{$prefix}-eight .parent,
            .row.#{$prefix}-eight .parent       { @include responsiveWidth(8); }
            &.#{$prefix}-nine .parent,
            .row.#{$prefix}-nine .parent        { @include responsiveWidth(9); }
            &.#{$prefix}-ten .parent,
            .row.#{$prefix}-ten .parent         { @include responsiveWidth(10); }
            &.#{$prefix}-eleven .parent,
            .row.#{$prefix}-eleven .parent      { @include responsiveWidth(11); }
            &.#{$prefix}-twelve .parent,
            .row.#{$prefix}-twelve .parent,
            &.#{$prefix}-full .parent,
            .row.#{$prefix}-full .parent        { @include responsiveWidth(12); }
            
            &.#{$prefix}-one-third .parent,
            .row.#{$prefix}-one-third .parent   { @include responsiveWidth(4); }
            &.#{$prefix}-two-thirds .parent,
            .row.#{$prefix}-two-thirds .parent  { @include responsiveWidth(8); }
            &.#{$prefix}-one-fifth .parent,
            .row.#{$prefix}-one-fifth .parent   { @include responsiveWidth(2.4); }

}











/*  Generate Responsive Grids
================================================== */

@each $prefix, $breakpoint in $breakpoints{
     @media only screen and (min-width: $breakpoint) {
        .grid {
            @include responsiveGrids($prefix);
        }
    }
}


/* #Clearing
================================================== */

    /* Self Clearing Goodness */
    .grid:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; }

    /* Use clearfix class on parent to clear nested columns,
    or wrap each row of columns in a <div class="row"> */
    .clearfix:before,
    .clearfix:after,
    .row:before,
    .row:after {
      content: '\0020';
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0; }
    .row:after,
    .clearfix:after {
      clear: both; }
    .row,
    .clearfix {
      zoom: 1; }

    /* You can also use a <br class="clear" /> to clear columns */
    .clear {
      clear: both;
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0;
    }
